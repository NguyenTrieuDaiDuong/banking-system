package com.example.demo.entities;

import static jakarta.persistence.GenerationType.IDENTITY;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.UniqueConstraint;

/**
 * Accounts generated by hbm2java
 */
@Entity
@Table(name = "accounts", uniqueConstraints = @UniqueConstraint(columnNames = "account_number"))
public class Accounts implements java.io.Serializable {

	private Long id;
	private AccountStatuses accountStatuses;
	private AccountTypes accountTypes;
	private Users users;
	private String accountNumber;
	private BigDecimal balance;
	private String currency;
	private Date createdAt;
	private Date updatedAt;
	private Set<Transactions> transactionsesForFromAccountId = new HashSet<Transactions>(0);
	private Set<Transactions> transactionsesForToAccountId = new HashSet<Transactions>(0);

	public Accounts() {
	}

	public Accounts(AccountStatuses accountStatuses, AccountTypes accountTypes, Users users, String accountNumber,
			Date createdAt, Date updatedAt) {
		this.accountStatuses = accountStatuses;
		this.accountTypes = accountTypes;
		this.users = users;
		this.accountNumber = accountNumber;
		this.createdAt = createdAt;
		this.updatedAt = updatedAt;
	}

	public Accounts(AccountStatuses accountStatuses, AccountTypes accountTypes, Users users, String accountNumber,
			BigDecimal balance, String currency, Date createdAt, Date updatedAt,
			Set<Transactions> transactionsesForFromAccountId, Set<Transactions> transactionsesForToAccountId) {
		this.accountStatuses = accountStatuses;
		this.accountTypes = accountTypes;
		this.users = users;
		this.accountNumber = accountNumber;
		this.balance = balance;
		this.currency = currency;
		this.createdAt = createdAt;
		this.updatedAt = updatedAt;
		this.transactionsesForFromAccountId = transactionsesForFromAccountId;
		this.transactionsesForToAccountId = transactionsesForToAccountId;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "status_id", nullable = false)
	public AccountStatuses getAccountStatuses() {
		return this.accountStatuses;
	}

	public void setAccountStatuses(AccountStatuses accountStatuses) {
		this.accountStatuses = accountStatuses;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "account_type_id", nullable = false)
	public AccountTypes getAccountTypes() {
		return this.accountTypes;
	}

	public void setAccountTypes(AccountTypes accountTypes) {
		this.accountTypes = accountTypes;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id", nullable = false)
	public Users getUsers() {
		return this.users;
	}

	public void setUsers(Users users) {
		this.users = users;
	}

	@Column(name = "account_number", unique = true, nullable = false, length = 20)
	public String getAccountNumber() {
		return this.accountNumber;
	}

	public void setAccountNumber(String accountNumber) {
		this.accountNumber = accountNumber;
	}

	@Column(name = "balance", precision = 15)
	public BigDecimal getBalance() {
		return this.balance;
	}

	public void setBalance(BigDecimal balance) {
		this.balance = balance;
	}

	@Column(name = "currency", length = 3)
	public String getCurrency() {
		return this.currency;
	}

	public void setCurrency(String currency) {
		this.currency = currency;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_at", nullable = false, length = 19)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated_at", nullable = false, length = 19)
	public Date getUpdatedAt() {
		return this.updatedAt;
	}

	public void setUpdatedAt(Date updatedAt) {
		this.updatedAt = updatedAt;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "accountsByFromAccountId")
	public Set<Transactions> getTransactionsesForFromAccountId() {
		return this.transactionsesForFromAccountId;
	}

	public void setTransactionsesForFromAccountId(Set<Transactions> transactionsesForFromAccountId) {
		this.transactionsesForFromAccountId = transactionsesForFromAccountId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "accountsByToAccountId")
	public Set<Transactions> getTransactionsesForToAccountId() {
		return this.transactionsesForToAccountId;
	}

	public void setTransactionsesForToAccountId(Set<Transactions> transactionsesForToAccountId) {
		this.transactionsesForToAccountId = transactionsesForToAccountId;
	}

}
